buildscript {
  ext {

  }
  repositories {
    jcenter()
    mavenLocal()
    maven {
      url "https://plugins.gradle.org/m2/"
    }
    maven {
      url "${beiartf_url}"
      credentials(AwsCredentials) {
        accessKey = "$System.env.BEIARTF_ACCESS_KEY_ID"
        secretKey = "$System.env.BEIARTF_SECRET_ACCESS_KEY"
        sessionToken = "$System.env.BEIARTF_SESSION_TOKEN"
      }
    }
  }
  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    classpath("com.google.protobuf:protobuf-gradle-plugin:${protobufVersion}")
    classpath("net.serenity-bdd:serenity-gradle-plugin:2.1.8")
  }
}

plugins {
  id 'org.springframework.boot' version '2.2.4.RELEASE'
  id 'io.spring.dependency-management' version '1.0.9.RELEASE'
  id 'org.asciidoctor.convert' version '1.5.8'
  id 'java'
}

apply plugin: 'com.google.protobuf'
apply plugin: 'java'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'net.serenity-bdd.aggregator'

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
  developmentOnly
  developmentOnly
  runtimeClasspath {
    extendsFrom developmentOnly
  }
  compileOnly {
    extendsFrom annotationProcessor
  }
}

repositories {
  mavenCentral()
}

ext {
  set('snippetsDir', file("build/generated-snippets"))
  set('springCloudServicesVersion', "2.2.1.RELEASE")
  set('springCloudVersion', "Hoxton.RELEASE")
}

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-actuator'
  implementation 'org.springframework.boot:spring-boot-starter-security'
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.springframework.boot:spring-boot-starter-webflux'
  implementation 'io.pivotal.spring.cloud:spring-cloud-services-starter-circuit-breaker'
  implementation 'org.apache.kafka:kafka-streams'
  implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
  implementation 'org.springframework.cloud:spring-cloud-starter-netflix-hystrix'
  implementation 'org.springframework.cloud:spring-cloud-starter-netflix-hystrix-dashboard'
  implementation 'org.springframework.cloud:spring-cloud-starter-netflix-ribbon'
  implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
  implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'
  implementation 'org.springframework.cloud:spring-cloud-stream'
  implementation 'org.springframework.cloud:spring-cloud-stream-binder-kafka'
  implementation 'org.springframework.cloud:spring-cloud-stream-binder-kafka-streams'
  implementation 'org.springframework.kafka:spring-kafka'
  developmentOnly 'org.springframework.boot:spring-boot-devtools'
  runtimeOnly 'com.h2database:h2'
  annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

  compileOnly 'org.projectlombok:lombok:1.18.12'
  annotationProcessor 'org.projectlombok:lombok:1.18.12'

  testCompileOnly 'org.projectlombok:lombok:1.18.12'
  testAnnotationProcessor 'org.projectlombok:lombok:1.18.12'

  testImplementation 'io.projectreactor:reactor-test'
  testImplementation 'org.springframework.cloud:spring-cloud-stream-test-support'
  testImplementation 'org.springframework.kafka:spring-kafka-test'
  testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
  testImplementation 'org.springframework.security:spring-security-test'
  testImplementation('org.springframework.boot:spring-boot-starter-test') {
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }


  compile('io.vavr:vavr:0.9.2')
  compile group: 'org.springframework', name: 'spring-jdbc', version: '5.2.3.RELEASE'

  //
  compile 'com.google.protobuf:protobuf-java:3.11.4'
  compile 'com.google.protobuf:protobuf-java-util:3.11.4'
  compile 'com.googlecode.protobuf-java-format:protobuf-java-format:1.4'
  implementation group: 'com.google.api.grpc', name: 'proto-google-common-protos', version: "$protoGoogleCommonVersion"
  compile "io.grpc:grpc-stub:${protocGenGrpcVersion}"
  compile "io.grpc:grpc-protobuf:${protocGenGrpcVersion}"
  compile "io.grpc:grpc-services:${protocGenGrpcVersion}"
  compile "io.grpc:grpc-netty:${protocGenGrpcVersion}"
  compile "io.grpc:grpc-protobuf:${protocGenGrpcVersion}"
  compile group: 'io.zipkin.brave', name: 'brave-instrumentation-grpc', version: '5.10.0'

  //
  compile group: 'com.fasterxml.jackson.module', name: 'jackson-module-parameter-names', version: '2.10.2'
  compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jdk8', version: '2.10.2'
  compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: '2.10.2'


  compile group: 'org.modelmapper', name: 'modelmapper', version: '2.3.6'

  // Testing
  testCompile group: 'org.springframework.cloud', name: 'spring-cloud-contract-wiremock', version: '2.2.1.RELEASE'
  testCompile group: 'net.serenity-bdd', name: 'serenity-core', version: '2.1.8'
  testCompile group: 'net.serenity-bdd', name: 'serenity-junit', version: '2.1.8'
  testCompile group: 'net.serenity-bdd', name: 'serenity-model', version: '2.1.8'
  testCompile group: 'net.serenity-bdd', name: 'serenity-spring', version: '2.1.8'
  testCompile group: 'net.serenity-bdd', name: 'serenity-test-utils', version: '2.1.8'
//  testCompile group: 'net.serenity-bdd', name: 'serenity-gradle-plugin', version: '2.1.8'



  compile("org.lognet:grpc-spring-boot-starter:2.3.2") {
    exclude group: 'io.grpc', module: 'grpc-services'
    exclude group: 'io.grpc', module: 'grpc-netty'
    exclude group: 'org.springframework.boot', module: 'spring-boot-starter'
  }

  compile group: 'io.opencensus', name: 'opencensus-api', version: '0.25.0'
  testCompile group: 'io.opencensus', name: 'opencensus-impl', version: '0.25.0'


}

dependencyManagement {
  imports {
    mavenBom "io.pivotal.spring.cloud:spring-cloud-services-dependencies:${springCloudServicesVersion}"
    mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
  }
}

test {
  outputs.dir snippetsDir
  useJUnitPlatform()
}

asciidoctor {
  inputs.dir snippetsDir
  dependsOn test
}

sourceSets {
  main {
    java {
      srcDirs 'src/main/java'
      srcDirs 'build/generated/source/proto/main/grpc'
      srcDirs 'build/generated/source/proto/main/java'
    }
  }
}

protobuf {
  protoc {
    artifact = "com.google.protobuf:protoc:${protocVersion}"
  }
  plugins {
    grpc {
      artifact = "io.grpc:protoc-gen-grpc-java:$protocGenGrpcVersion"
    }
  }
  generateProtoTasks {
    all().each { task ->
      task.plugins {
        grpc {}
      }
      task.generateDescriptorSet = true
      task.descriptorSetOptions.includeImports = true
      task.descriptorSetOptions.includeSourceInfo = true
    }
  }
}