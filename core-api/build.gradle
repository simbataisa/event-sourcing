apply plugin: "java"
apply plugin: "com.google.protobuf"
apply from: "${rootDir}/gradle/spring-boot.gradle"
apply from: "${rootDir}/gradle/lombok.gradle"

dependencies {

    // GRPC
    implementation "com.google.protobuf:protobuf-java:${protoBufCoreVersion}"
    implementation "com.google.protobuf:protobuf-java-util:${protoBufCoreVersion}"
    implementation "com.googlecode.protobuf-java-format:protobuf-java-format:1.4"
    implementation "com.google.api.grpc:proto-google-common-protos:${protoGoogleCommonVersion}"
    implementation "io.grpc:grpc-stub:${protocGenGrpcVersion}"
    implementation "io.grpc:grpc-protobuf:${protocGenGrpcVersion}"
    implementation "io.grpc:grpc-services:${protocGenGrpcVersion}"
    implementation "io.grpc:grpc-netty:${protocGenGrpcVersion}"
    implementation "io.grpc:grpc-protobuf:${protocGenGrpcVersion}"
    implementation group: "io.zipkin.brave", name: "brave-instrumentation-grpc", version: "5.10.0"

    //
    implementation "com.fasterxml.jackson.module:jackson-module-parameter-names:${jacksonVersion}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:${jacksonVersion}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"
    implementation "org.modelmapper:modelmapper:2.4.2"
    implementation "io.vavr:vavr:0.9.2"
    implementation 'org.slf4j:slf4j-api:1.7.32'

    implementation("javax.annotation:javax.annotation-api:1.3.2")


    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
}

test {
    useJUnitPlatform()
}

sourceSets {
    main {
        java {
            srcDirs "src/main/java"
            srcDirs "generated/proto/main/grpc"
            srcDirs "generated/proto/main/java"
        }
    }
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protoBufCoreVersion}"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${protocGenGrpcVersion}"
        }
    }
    generateProtoTasks.generatedFilesBaseDir = 'generated/proto'

    generateProtoTasks {
        all().each { task ->
            task.plugins {
                grpc {}
            }
            task.generateDescriptorSet = true
            task.descriptorSetOptions.includeImports = true
            task.descriptorSetOptions.includeSourceInfo = true
        }
    }
}

bootJar.enabled = false
jar.enabled = true
